#include <json/json.h>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>

#include "json_utils.h"

#ifdef __cplusplus
extern "C" {
#endif

    std::vector<std::vector<std::string>> readCSV(const std::string& filename) {
        std::ifstream file(filename);
        std::vector<std::vector<std::string>> data;
        std::string line;
        while (std::getline(file, line)) {
            std::vector<std::string> row;
            std::stringstream lineStream(line);
            std::string cell;
            while (std::getline(lineStream, cell, ',')) {
                row.push_back(cell);
            }
            data.push_back(row);
        }
        return data;
    }

    Json::Value constructJSON(int source_id, int sink_id) {
        Json::Value result;

        // std::string csv_folder = "/home/chenyz/json-rpc/souffle-client/src/tmp";
        std::string csv_folder = "/opt/codeql/rpc/tmp/";

        // load methods.csv
        std::string methods_file = csv_folder + "/methods.csv";
        auto methods_data = readCSV(methods_file);

        // load classes_or_interfaces.csv
        std::string classes_file = csv_folder + "/classes_or_interfaces.csv";
        auto classes_data = readCSV(classes_file);

        // load packages.csv
        std::string packages_file = csv_folder + "/packages.csv";
        auto packages_data = readCSV(packages_file);

        // mapping csv data to C++ unordered_map
        std::unordered_map<int, std::vector<std::string>> methods_map;
        std::unordered_map<int, std::vector<std::string>> classes_map;
        std::unordered_map<int, std::string> packages_map;

        for (const auto& row : methods_data) {
            if (!row.empty() && row[0] != "id") {
                methods_map[std::stoi(row[0])] = row;
            }
        }

        for (const auto& row : classes_data) {
            if (!row.empty() && row[0] != "id") {
                classes_map[std::stoi(row[0])] = row;
            }
        }

        for (const auto& row : packages_data) {
            if (!row.empty() && row[0] != "id") {
                packages_map[std::stoi(row[0])] = row[1];
            }
        }

        // processing sink_id
        if (methods_map.find(sink_id) != methods_map.end()) {
            auto& method_row = methods_map[sink_id];
            std::string method_name = method_row[1];
            std::string signature = method_row[2];
            int parent_id = std::stoi(method_row[3]);

            if (classes_map.find(parent_id) != classes_map.end()) {
                auto& class_row = classes_map[parent_id];
                std::string class_name = class_row[1];
                int package_id = std::stoi(class_row[2]);

                if (packages_map.find(package_id) != packages_map.end()) {
                    std::string package_name = packages_map[package_id];

                    // build DeclaringClass
                    std::string declaring_class = "L" + package_name + "." + class_name;
                    std::replace(declaring_class.begin(), declaring_class.end(), '.', '/');
                    result["Sinks"][0]["DeclaringClass"] = declaring_class;

                    // set MethodName
                    result["Sinks"][0]["MethodName"] = method_name;

                    // set result["Sinks"]
                    result["Sinks"][0]["ReturnType"] = "Lorg/w3c/dom/Document"; 
                    result["Sinks"][0]["ArgTypes"] = "Lorg/xml/sax/InputSource"; 
                    result["Sinks"][0]["BelongTo"] = "Solr_CVE_2018_1308"; 
                    result["Sinks"][0]["AnySource2AnyArg"] = Json::Value(Json::objectValue);
                }
            }
        }

        // processing source_id
        if (methods_map.find(source_id) != methods_map.end()) {
            auto& method_row = methods_map[source_id];
            std::string method_name = method_row[1];
            std::string signature = method_row[2];
            int parent_id = std::stoi(method_row[3]);

            if (classes_map.find(parent_id) != classes_map.end()) {
                auto& class_row = classes_map[parent_id];
                std::string class_name = class_row[1];
                int package_id = std::stoi(class_row[2]);

                if (packages_map.find(package_id) != packages_map.end()) {
                    std::string package_name = packages_map[package_id];

                    // build DeclaringClass
                    std::string declaring_class = "L" + package_name + "." + class_name;
                    std::replace(declaring_class.begin(), declaring_class.end(), '.', '/');

                    // set result["Sources"]
                    Json::Value source;
                    source["DeclaringClass"] = declaring_class;
                    source["MethodName"] = method_name;
                    source["ReturnType"] = "Ljava/lang/String"; 
                    source["ArgTypes"] = ""; 
                    source["BelongTo"] = "Solr_CVE_2018_1308"; 
                    source["ParameterIndex"] = "-1"; 
                    source["BugLevel"] = "HIGH"; 

                    result["Sources"].append(source);
                }
            }
        }

        // Add FieldSources and Kills 
        result["FieldSources"] = Json::Value(Json::arrayValue);

        Json::Value kill;
        kill["ParameterIndex"] = "1";
        kill["Fields"] = "";
        kill["DeclaringClass"] = "Ljavax/xml/parsers/DocumentBuilder";
        kill["MethodName"] = "setEntityResolver";
        kill["ReturnType"] = "V";
        kill["ArgTypes"] = "Lorg/xml/sax/EntityResolver";
        kill["BelongTo"] = "Solr_CVE_2018_1308";
        result["Kills"].append(kill);

        // Test the result
        // std::cout << "Constructed JSON: " << result.toStyledString() << std::endl;

        // Save the result
        std::string debug_filename = "/tmp/Solr_CVE_2018_1308_" + std::to_string(source_id) + "_" + std::to_string(sink_id) + ".json";
        saveJSON(result, debug_filename.c_str());
        // std::cout << "JSON saved to " << debug_filename << std::endl;

        return result;
    }

    void saveJSON(const Json::Value& json, const char* filename) {
        std::ofstream file(filename);
        file << json.toStyledString();
        file.close();
    }

#ifdef __cplusplus
}
#endif
