/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */
// change by kl 2024.12

// #ifndef JSONRPC_CPP_STUB_RPC_CLIENT_H_
// #define JSONRPC_CPP_STUB_RPC_CLIENT_H_
// #if __cplusplus >= 201703L
// #define throw(...)
// #endif
#include <nlohmann/json.hpp>


#include <jsonrpccxx/client.hpp>
#include <jsonrpccxx/server.hpp>
// #include <jsonrpccpp/client.h>

// class rpc_client : public jsonrpc::Client
// {
//     public:
//         rpc_client(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

//         nlohmann::json processInputJson(const nlohmann::json& input) throw (jsonrpc::JsonRpcException)
//         {
//             nlohmann::json p;
//             p["input"] = input;
//             nlohmann::json result = this->CallMethod("processInputJson",p);
//             if (result.is_object())
//                 return result;
//             else
//                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.dump());
//         }
//         nlohmann::json dealing(const nlohmann::json& input) throw (jsonrpc::JsonRpcException)
//         {
//             nlohmann::json p;
//             p["input"] = input;
//             nlohmann::json result = this->CallMethod("dealing",p);
//             if (result.is_object())
//                 return result;
//             else
//                 // throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
//                 throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.dump());
//         }
//         nlohmann::json wkRpcProcess(const nlohmann::json& input) throw (jsonrpc::JsonRpcException)
//         {
//             nlohmann::json p;
//             p["input"] = input;
//             nlohmann::json result = this->CallMethod("wkRpcProcess",p);
//             return result;
//         }
// };

#pragma once
#include "nlohmann/json.hpp"
#include "jsonrpccxx/client.hpp"
#include "jsonrpccxx/iclientconnector.hpp"
#include "jsonrpccxx/http_client_connector.hpp"
namespace jsonrpccxx {

class rpc_client : public JsonRpcClient {
public:
    // 构造函数，接受 URL 和版本类型
    rpc_client(IClientConnector& connector, version v = version::v2)
        : JsonRpcClient(connector, v) {}

    // 调用 processInputJson 方法
    json processInputJson(const json& input) {
        json p;
        p["input"] = input;
        return CallMethod<json>("1", "processInputJson", p); // 使用 id 为 "1" 的调用
    }

    // 调用 dealing 方法
    json dealing(const json& input) {
        json p;
        p["input"] = input;
        return CallMethod<json>("2", "dealing", p); // 使用 id 为 "2" 的调用
    }

    // 调用 wkRpcProcess 方法
    json wkRpcProcess(const json& input) {
        json p;
        p["input"] = input;
        return CallMethod<json>("3", "wkRpcProcess", p); // 使用 id 为 "3" 的调用
    }
};

} // namespace jsonrpccxx
// #endif //JSONRPC_CPP_STUB_RPC_CLIENT_H_
